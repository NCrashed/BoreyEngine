// Copyright (—Å) 2013 Gushcha Anton <ncrashed@gmail.com>
/*
* This file is part of Borey Engine.
*
* Boost Software License - Version 1.0 - August 17th, 2003
* 
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
/**
*   Provides interface for logging capacities.
*/
module borey.log;
@safe:

import std.conv;

/**
*   Log levels defines style of the messages.
*   Printing in console can be controled by
*   ILogger.minOutputLevel property.
*/
enum ELOG_LEVEL
{
    NOTICE,
    WARNING,
    DEBUG,
    FATAL,
}

/**
*   Interface for lazy logging. Assumes to be nothrow.
*   Underlying realization should be concurrent safe.
*/
interface ILogger
{
    nothrow synchronized 
    {
        /**
        *   Log file name.
        */
        string name() @property const;

        /**
        *   Full log name.
        */
        string location() @property const;

        /**
        *   Prints message into log. Displaying in the console
        *   controled by minOutputLevel property.
        *
        *   Notes: const modificator needed to log into const
        *   methods, though method changes output streams state.
        */
        void log(lazy string message, ELOG_LEVEL level) const;

        /*
        *   Returns: minimum log level,  will be printed in the console.
        */
        ELOG_LEVEL minOutputLevel() const @property;

        /*
        *   Setups minimum log level, 
        */
        void minOutputLevel(ELOG_LEVEL level) @property;
    }


    /**
    *   Wrapper for handy debug messages.
    *   Warning: main purpose for debug messages, thus it is not lazy.
    */
    final void logDebug(E...)(E args) const @trusted
    {
        scope(failure) {}
        debug
        {
            string str = text(args);
            log(str, ELOG_LEVEL.DEBUG);
        }
    }

    // wrappers for easy logging
    final nothrow synchronized  @trusted
    {
        void logNotice(lazy string message) const
        {
            log(message, ELOG_LEVEL.NOTICE);
        }

        void logWarning(lazy string message) const
        {
            log(message, ELOG_LEVEL.WARNING);
        }

        void logFatal(lazy string message) const
        {
            log(message, ELOG_LEVEL.FATAL);
        }
    }
}