// Copyright (—Å) 2013 Gushcha Anton <ncrashed@gmail.com>
/*
* This file is part of Borey Engine.
*
* Boost Software License - Version 1.0 - August 17th, 2003
* 
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
// This file is written in D programming language
module borey.util.frustum;

import borey.util.matrix;
import borey.util.plane;

/**
*   Struct describes view frustum of camera (clipped prism) and used
*   to perform view culling for scene graph.
*
*   TODO: add frustum constructing for othogonal projection.
*/
struct ViewFrustum
{
    /// Projection matrix
    Matrix!4 projection;

    /**
    *   Creating view frustum with perspective projection.
    *
    *   Params:
    *   fovy   = Viewing angle in radians. Usually around [30..90] degrees.
    *   aspect = Relation between vieport height and width.
    *   zNear  = Near clipping plane.
    *   zFar   = Far clipping plane.
    */
    this(Radian fovy, float aspect, float zNear, float zFar)
    {
        projection = borey.util.matrix.projection(fovy, aspect, zNear, zFar);
    }

    /// Near clipping plane
    /**
    *   Calculates near clipping plane in world coordinates.
    */
    plane3df getNearPlane(Matrix!4 viewMatrix) const
    {
        auto vec = viewMatrix.getRow(3) + viewMatrix.getRow(2);
        return plane3df(vec.x, vec.y, vec.z, vec.w);
    }

    /// Far clipping plane
    /**
    *   Calculates far clipping plane in world coordinates.
    */
    plane3df getFarPlane(Matrix!4 viewMatrix) const
    {
        auto vec = viewMatrix.getRow(3) - viewMatrix.getRow(2);
        return plane3df(vec.x, vec.y, vec.z, vec.w);
    }

    /// Left clipping plane
    /**
    *   Calculates left clipping plane in world coordinates.
    */    
    plane3df getLeftPlane(Matrix!4 viewMatrix) const
    {
        auto vec = viewMatrix.getRow(3) + viewMatrix.getRow(0);
        return plane3df(vec.x, vec.y, vec.z, vec.w);        
    }

    /// Right clipping plane
    /**
    *   Calculates right clipping plane in world coordinates.
    */     
    plane3df getRightPlane(Matrix!4 viewMatrix) const
    {
        auto vec = viewMatrix.getRow(3) - viewMatrix.getRow(0);
        return plane3df(vec.x, vec.y, vec.z, vec.w);        
    }

    /// Upper clipping plane
    /**
    *   Calculates upper clipping plane in world coordinates.
    */     
    plane3df getUpperPlane(Matrix!4 viewMatrix) const
    {
        auto vec = viewMatrix.getRow(3) - viewMatrix.getRow(1);
        return plane3df(vec.x, vec.y, vec.z, vec.w);        
    }

    /// Bottom clipping plane
    /**
    *   Calculates bottom clipping plane in world coordinates.
    */     
    plane3df getBottomPlane(Matrix!4 viewMatrix) const
    {
        auto vec = viewMatrix.getRow(3) + viewMatrix.getRow(1);
        return plane3df(vec.x, vec.y, vec.z, vec.w);        
    }
}