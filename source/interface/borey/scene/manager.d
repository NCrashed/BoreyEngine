// Copyright (—Å) 2013 Gushcha Anton <ncrashed@gmail.com>
/*
* This file is part of Borey Engine.
*
* Boost Software License - Version 1.0 - August 17th, 2003
* 
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
// This file is written in D programming language
module borey.scene.manager;
@safe:

import borey.util.vector;
import borey.util.matrix;
import borey.util.frustum;
import borey.scene.node;
import borey.video.model;
import std.range;

/**
*   Manager which handle all scene objects. Manager
*   can construct it own scene hierarchy to provide
*   fast view frustum culling.
*/
interface ISceneManager
{
    /// Name of root node
    enum ROOT_SCENE_NODE = "root";

    synchronized
    {
        /**
        *   Returns root scene node. All nodes should be
        *   attached to root node to be rendered.
        */
        shared(ISceneNode) rootSceneNode() @property;

        /**
        *   Struct handles all needed information for
        *   video driver to render scene node.
        */
        struct RenderNode
        {
            /// Models to be rendered
            InputRange!IModel models;
            /// Absolute position
            vector3df position;
            /// Absolute rotation
            Matrix!4 rotation;
        }

        /**
        *   Perform view frustum culling. Returns range of scene
        *   nodes to be rendered. Output range consists of
        *   all scene nodes to be rendered, all tree descending
        *   incapsulated in range. Invisible nodes not included in
        *   range.
        */
        InputRange!RenderNode fetchNodesByFrustum(ViewFrustum view);
    }
}