// Copyright (—Å) 2013 Gushcha Anton <ncrashed@gmail.com>
/*
* This file is part of Borey Engine.
*
* Boost Software License - Version 1.0 - August 17th, 2003
* 
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
// This file is written in D programming language
/**
*   Module describes hardware buffers storing 3D and 2D verticies and
*   indexes. Buffers have to watch their data and reload it to hardware
*   if needed. Also buffers should be concurrent safe to handle dynamic
*   geometry.
*/
module borey.video.buffer;

import borey.util.vector;
import std.range;

/**
*   Watched buffer. If data is changed, should be reloaded to hardware.
*/
interface IHardwareBuffer
{
    /**
    *   Returns true if someone changed buffer data and the hardware
    *   data should be reloaded.
    *
    *   Note: should be noblocking to not block rendering thread.
    */
    bool dataChanged() @property;

    /**
    *   Loads buffer data to hardware. Called while initializing and
    *   when data is changed.
    *
    *   Note: synchronized to be shure no write operations is performed.
    */
    synchronized void hardwareLoad();
}

/**
*   Buffer storing 3D vertices.
*/
interface IVertexBuffer3D : IHardwareBuffer
{
    /**
    *   Clears buffer and loads vertex range into buffer.
    */
    synchronized void load(InputRange!vector3df data);
}

/**
*   Buffer storing 2D vertices.
*/
interface IVertexBuffer2D : IHardwareBuffer
{
    /**
    *   Clears buffer and loads vertex range into buffer.
    */
    synchronized void load(InputRange!vector2df data);
}

/**
*   Buffer storing indexes.
*/
interface IIndexBuffer : IHardwareBuffer
{
    /**
    *   Clears buffer and loads vertex range into buffer.
    */
    synchronized void load(InputRange!uint data);
}