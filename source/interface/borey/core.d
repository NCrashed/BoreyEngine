// Copyright (—Å) 2013 Gushcha Anton <ncrashed@gmail.com>
/*
* This file is part of Borey Engine.
*
* Boost Software License - Version 1.0 - August 17th, 2003
* 
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
* 
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
// This file is written in D programming language
/**
*   Module provides access to all subsytems of the Borey Engine. This interface
*   should be obtained by programm before using any engine features.
*/
module borey.core;
@safe:

import borey.log;
import borey.video.driver;
import borey.video.window;
import borey.video.monitor;
import borey.scene.manager;
import borey.resource.manager;
import std.range;

/**
*   Main interface of the Borey Engine. It grands access to all engine
*   subsystems.
*/
interface IBoreyCore
{
    pure nothrow const
    {
        /**
        *   Returns: version of loaded engine.
        */
        string getVersion();

        /**
        *   Returns: copyright notes.
        */
        string copyright() @property;

        /**
        *   Returns: true if core can handle many windows, else false.
        */
        bool supportManyWindows() @property;
    }

    /**
    *   Closes all underlying resources.
    */
    void terminate();

    /**
    *   Get default logger.
    */
    shared(ILogger) logger() @property;

    /**
    *   Returns video driver used by this core.
    */
    IVideoDriver videoDriver() @property;

    /**
    *   Returns current scene manager.
    */
    shared(ISceneManager) sceneManager() @property;

    /**
    *   Returns current resource manager.
    */
    shared(IResourceManager) resourceManager() @property;

    /**
    *   Range of created windows.
    */
    InputRange!IWindow windows() @property;

    /**
    *   Creates window with specified size (sizex, sizey) and title. If makeCurrent is true,
    *   contex of the window becomes current, and you can draw on it immidiately.
    *   If not null monitor parameter is passed, window will become fullscreen on that monitor.
    *
    *   Warning: Actual size of window may be different especially for fullscreen mode.
    *   Notes: Throws WindowException on errors.
    *   Notes: This realization recreates window on following calls.
    *
    *   Params:
    *   logger = Logger to use,
    *   width = window width, can be adjusted for fullscreen window;
    *   height = window height, can be adjusted for fullscreen window;
    *   tittle = window tittle;
    *   monitor = if not null, window will be fullscreen on this monitor;
    *   resizable = should be window size resizable;
    *   visible = if true, window will be created and showed immidietly;
    *   decorated = if false, window head and control buttons won't be created.
    *
    *   Warning: Window should be created in main thread.
    */
    IWindow createWindow(uint width, uint height, string title, IMonitor monitor = null, bool makeCurrent = true,
        bool resizable = false, bool visible = true, bool decorated = true);

    /**
    *   Drops current drawing context binded to any window.
    *   Used to detach context before destroying windows.
    */
    void clearCurrentContext();

    /**
    *   Gets current binded context or null if none is binded.
    */
    IWindow getCurrentContext();

    /**
    *   Returns main monitor of the pc.
    */
    IMonitor primaryMonitor() @property;

    /**
    *   Returns a range of available monitors.
    */
    InputRange!IMonitor monitors() @property;

    /**
    *   Enum describes events that can be passed to on change delegate.
    *   See_also: OnMonitorChangeDelegate, onMonitorChangeCallback
    */
    enum MONITOR_EVENT
    {
        CONNECTED,
        DISCONNECTED
    }

    /**
    *   Delegate type used by property onMonitorChangeCallback.
    */
    alias void delegate(IMonitor, MONITOR_EVENT) OnMonitorChangeDelegate;

    /**
    *   Setups delegate which will be called when the monitor
    *   disconnected or connected to system.
    */
    void onMonitorChangeCallback(OnMonitorChangeDelegate deleg) @property;

    /**
    *   Returns current delegate for on change events.
    *   See_also: onMonitorChangeCallback(OnMonitorChangeDelegate)
    */
    OnMonitorChangeDelegate onMonitorChangeCallback() const @property;

    /**
    *   Processes only those events that have already been received and then returns immediately. 
    */
    void pollEvents();

    /**
    *   If value is true, event loop in method runEventLoop() should close all windows and return
    *   at next loop iteration.
    */
    void shouldExit(bool value) @property;

    /**
    *   If value is true, event loop in method runEventLoop() should close all windows and return
    *   at next loop iteration.
    */
    bool shouldExit() @property;

    /**
    *   Begins infinite loop of event processing and drawing. Exits when all windows are closed
    *   or shouldExit flag is set to true.
    */
    void runEventLoop();
}